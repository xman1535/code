#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>
using namespace std;

void parallelBFS(vector<vector<int>>& graph, int start) {
    int n = graph.size();
    vector<bool> visited(n, false);
    queue<int> q;
    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int size = q.size();
        #pragma omp parallel for
        for (int i = 0; i < size; i++) {
            int node;
            #pragma omp critical
            {
                node = q.front();
                q.pop();
                cout << "Visited: " << node << endl;
            }
            for (int neighbor : graph[node]) {
                if (!visited[neighbor]) {
                    #pragma omp critical
                    {
                        visited[neighbor] = true;
                        q.push(neighbor);
                    }
                }
            }
        }
    }
}

int main() {
    vector<vector<int>> graph = {
        {1, 2}, {0, 3, 4}, {0, 4}, {1}, {1, 2}
    };
    parallelBFS(graph, 0);
    return 0;
}